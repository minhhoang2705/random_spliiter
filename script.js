document.addEventListener('DOMContentLoaded', function() {
    const playerCountSelect = document.getElementById('playerCount');
    const playerNamesDiv = document.getElementById('playerNames');
    const nameInputsDiv = document.getElementById('nameInputs');
    const splitTeamsBtn = document.getElementById('splitTeams');
    const resultsSection = document.getElementById('results');
    const resetBtn = document.getElementById('resetBtn');

    // Event listeners
    playerCountSelect.addEventListener('change', handlePlayerCountChange);
    splitTeamsBtn.addEventListener('click', handleSplitTeams);
    resetBtn.addEventListener('click', handleReset);

    // X·ª≠ l√Ω thay ƒë·ªïi s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i
    function handlePlayerCountChange() {
        const count = parseInt(playerCountSelect.value);
        
        if (count) {
            createNameInputs(count);
            playerNamesDiv.classList.remove('hidden');
            splitTeamsBtn.classList.remove('hidden');
        } else {
            playerNamesDiv.classList.add('hidden');
            splitTeamsBtn.classList.add('hidden');
            resultsSection.classList.add('hidden');
        }
    }

    // T·∫°o input fields cho t√™n ng∆∞·ªùi ch∆°i
    function createNameInputs(count) {
        nameInputsDiv.innerHTML = '';
        
        for (let i = 1; i <= count; i++) {
            const nameInputDiv = document.createElement('div');
            nameInputDiv.className = 'name-input';
            
            nameInputDiv.innerHTML = `
                <label for="player${i}">Ng∆∞·ªùi ${i}:</label>
                <input type="text" id="player${i}" placeholder="Nh·∫≠p t√™n ng∆∞·ªùi ch∆°i ${i}" required>
            `;
            
            nameInputsDiv.appendChild(nameInputDiv);
        }
    }

    // X·ª≠ l√Ω chia team
    function handleSplitTeams() {
        const count = parseInt(playerCountSelect.value);
        const players = [];
        
        // L·∫•y t√™n c√°c ng∆∞·ªùi ch∆°i
        for (let i = 1; i <= count; i++) {
            const name = document.getElementById(`player${i}`).value.trim();
            if (!name) {
                alert(`Vui l√≤ng nh·∫≠p t√™n cho ng∆∞·ªùi ch∆°i ${i}`);
                return;
            }
            players.push(name);
        }

        // Ki·ªÉm tra t√™n tr√πng l·∫∑p
        const uniqueNames = new Set(players);
        if (uniqueNames.size !== players.length) {
            alert('Vui l√≤ng kh√¥ng nh·∫≠p t√™n tr√πng l·∫∑p!');
            return;
        }

        // Chia team v√† hi·ªÉn th·ªã k·∫øt qu·∫£
        const teams = splitIntoTeams(players);
        displayResults(teams);
    }

    // Chia players th√†nh 2 team ng·∫´u nhi√™n v·ªõi roles
    function splitIntoTeams(players) {
        const shuffledPlayers = shuffleArray(players);
        const teamSize = players.length / 2;
        const playerCount = players.length;
        
        const team1Players = shuffledPlayers.slice(0, teamSize);
        const team2Players = shuffledPlayers.slice(teamSize);
        
        // Assign roles cho m·ªói team d·ª±a tr√™n s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i
        const team1WithRoles = assignRoles(team1Players, playerCount);
        const team2WithRoles = assignRoles(team2Players, playerCount);
        
        // Random champions cho m·ªói team
        const team1Champions = getRandomChampions(10);
        const team2Champions = getRandomChampions(10);
        
        return {
            team1: {
                players: team1WithRoles,
                champions: team1Champions
            },
            team2: {
                players: team2WithRoles,
                champions: team2Champions
            }
        };
    }

    // Assign roles ng·∫´u nhi√™n cho m·ªôt team
    function assignRoles(players, playerCount) {
        let availableRoles;
        
        // X√°c ƒë·ªãnh roles d·ª±a tr√™n s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i
        if (playerCount === 6) {
            // 6 ng∆∞·ªùi: m·ªói team 3 ng∆∞·ªùi, b·ªè jungle
            availableRoles = ["Top", "Mid", "ADC"];
        } else if (playerCount === 8) {
            // 8 ng∆∞·ªùi: m·ªói team 4 ng∆∞·ªùi, b·ªè support
            availableRoles = ["Top", "Jungle", "Mid", "ADC"];
        } else {
            // 10 ng∆∞·ªùi: m·ªói team 5 ng∆∞·ªùi, ƒë·ªß t·∫•t c·∫£ roles
            availableRoles = ["Top", "Jungle", "Mid", "ADC", "Support"];
        }
        
        const shuffledRoles = shuffleArray(availableRoles);
        return players.map((player, index) => ({
            name: player,
            role: shuffledRoles[index % shuffledRoles.length]
        }));
    }

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    function displayResults(teams) {
        // Hi·ªÉn th·ªã th√¥ng tin format game
        const playerCount = parseInt(playerCountSelect.value);
        let formatInfo = '';
        if (playerCount === 6) {
            formatInfo = 'üéÆ Format: 3v3 (kh√¥ng c√≥ Jungle)';
        } else if (playerCount === 8) {
            formatInfo = 'üéÆ Format: 4v4 (kh√¥ng c√≥ Support)';
        } else {
            formatInfo = 'üéÆ Format: 5v5 (ƒë·∫ßy ƒë·ªß v·ªã tr√≠)';
        }
        
        const resultsH2 = resultsSection.querySelector('h2');
        resultsH2.innerHTML = `K·∫øt qu·∫£ chia team<br><small style="font-size: 0.8em; color: #c9aa71;">${formatInfo}</small>`;
        
        // Hi·ªÉn th·ªã team 1
        const team1PlayersDiv = document.getElementById('team1Players');
        team1PlayersDiv.innerHTML = '';
        teams.team1.players.forEach(player => {
            const playerDiv = document.createElement('div');
            playerDiv.className = 'player';
            playerDiv.innerHTML = `
                <div class="player-name">${player.name}</div>
                <div class="player-role">${getRoleIcon(player.role)} ${player.role}</div>
            `;
            team1PlayersDiv.appendChild(playerDiv);
        });

        // Hi·ªÉn th·ªã champions team 1
        const team1ChampionsDiv = document.getElementById('team1Champions');
        team1ChampionsDiv.innerHTML = '';
        teams.team1.champions.forEach(champion => {
            const championDiv = document.createElement('div');
            championDiv.className = 'champion';
            championDiv.textContent = champion;
            team1ChampionsDiv.appendChild(championDiv);
        });

        // Hi·ªÉn th·ªã team 2
        const team2PlayersDiv = document.getElementById('team2Players');
        team2PlayersDiv.innerHTML = '';
        teams.team2.players.forEach(player => {
            const playerDiv = document.createElement('div');
            playerDiv.className = 'player';
            playerDiv.innerHTML = `
                <div class="player-name">${player.name}</div>
                <div class="player-role">${getRoleIcon(player.role)} ${player.role}</div>
            `;
            team2PlayersDiv.appendChild(playerDiv);
        });

        // Hi·ªÉn th·ªã champions team 2
        const team2ChampionsDiv = document.getElementById('team2Champions');
        team2ChampionsDiv.innerHTML = '';
        teams.team2.champions.forEach(champion => {
            const championDiv = document.createElement('div');
            championDiv.className = 'champion';
            championDiv.textContent = champion;
            team2ChampionsDiv.appendChild(championDiv);
        });

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        resultsSection.classList.remove('hidden');
        resultsSection.scrollIntoView({ behavior: 'smooth' });
    }

    // L·∫•y icon cho role
    function getRoleIcon(role) {
        const icons = {
            'Top': '‚öîÔ∏è',
            'Jungle': 'üå≤',
            'Mid': '‚≠ê',
            'ADC': 'üèπ',
            'Support': 'üõ°Ô∏è'
        };
        return icons[role] || '‚ùì';
    }

    // Reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
    function handleReset() {
        playerCountSelect.value = '';
        playerNamesDiv.classList.add('hidden');
        splitTeamsBtn.classList.add('hidden');
        resultsSection.classList.add('hidden');
        nameInputsDiv.innerHTML = '';
    }

    // Animation hi·ªáu ·ª©ng khi load trang
    function addLoadAnimation() {
        const container = document.querySelector('.container');
        container.style.opacity = '0';
        container.style.transform = 'translateY(30px)';
        
        setTimeout(() => {
            container.style.transition = 'all 0.8s ease';
            container.style.opacity = '1';
            container.style.transform = 'translateY(0)';
        }, 100);
    }

    // Kh·ªüi t·∫°o animation
    addLoadAnimation();
}); 